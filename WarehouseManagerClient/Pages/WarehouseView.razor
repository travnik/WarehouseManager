@page "/warehouseview"
@using WarehouseManagement.Shared.Domain
@inject HttpClient Http

<h3>Склады</h3>

@if (warehouseProducts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <input type="text" @bind-value="@Test" />
    <table class='table table-striped table-bordered table-hover table-condensed' style="width: 80%;">
        <thead>
            <tr>
                <th style="width: 30%">Name</th>
                <th style="width: 20%">Count</th>
                <th style="width: 30%">Edit</th>
                <th style="width: 20%">Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var todo in warehouseProducts)
            {
                <tr>
                    <td>
                        @*<span>@todo.Product.Name</span>*@
                        <input type="text" @bind-value="@todo.Product.Name" />
                    </td>
                    <td>
                        <input type="number" @bind-value="@todo.Count" />
                    </td>
                    @*<td>
                            <button style="display:@HideOnEditing(todo.Id);" class="btn btn-primary" @onclick(()=> EditToDo(todo))>Edit</button>
                            <button style="display:@ShowOnEditing(todo.Id);" class="btn btn-success" @onclick(async ()=> await UpdateToDo(todo))>Update</button>
                            <button style="display:@ShowOnEditing(todo.Id);" class="btn btn-primary" @onclick(()=> CancelToDo())>Cancel</button>
                        </td>
                        <td><button class="btn btn-danger" @onclick(async ()=> await DeleteToDo(todo.Id))>Delete</button></td>*@
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private Warehouse warehouse { get; set; }
    private WarehouseProduct[] warehouseProducts { get; set; }

    [Parameter]
    public string Test { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private String ShowOnEditing(Guid _id)
    {
        //return (SelectedID == _id) ? "" : "none";
        return "none";
    }

    private String HideOnEditing(Guid _id)
    {
        //return (SelectedID == _id) ? "none" : "";
        return "none";
    }

    private async Task Refresh()
    {
        warehouseProducts = await Http.GetJsonAsync<WarehouseProduct[]>("/api/warehouseProduct");
        Test = "hello world";
        StateHasChanged();
    }

    /*private async Task AddToDo()
    {
        if (!string.IsNullOrEmpty(itemName))
        {
            await Http.SendJsonAsync(HttpMethod.Post, "/api/ToDo", new ToDoList
            {
                Item = itemName,
            });
            itemName = "";
            await Refresh();
        }
    }*/

    private async Task UpdateToDo(WarehouseProduct todo)
    {
        //if (!string.IsNullOrEmpty(todo.Item))
        {
            //await Http.SendJsonAsync(HttpMethod.Put, $"/api/ToDo/{todo.Id}", todo);
            //SelectedID = -1;
            await Refresh();
        }
    }

    private async Task DeleteToDo(Guid id)
    {
        //await Http.DeleteAsync($"/api/ToDo/{id}");
        await Refresh();
    }

    private void EditToDo(WarehouseProduct todo)
    {
        //SelectedID = todo.ID;
    }

    private void CancelToDo()
    {
        //SelectedID = -1;
    }
}
